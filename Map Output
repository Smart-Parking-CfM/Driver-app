import numpy as np
from pylab import *

path = [[0, 1], [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [4, 1], [5, 1], [5, 2], [5, 3], [5, 4], [4, 4], [3, 4], [3, 3], [3, 2]]

grid = [[["RL"], ["S"], ["W"], ["E"], ["W"], ["RU"], ["RR"], ["RR"]],
    [["RD"], ["W"], ["RL"], ["RU"], ["W"], ["RU"], ["W"], ["RD"]], 
    [["RD"], ["W"], ["W"], ["RU"], ["W"], ["RU"], ["W"], ["RD"]], 
    [["RD"], ["W"], ["P"], ["RL"], ["RU"], ["RR"], ["W"], ["RD"]], 
    [["RD"], ["RR"], ["W"], ["W"], ["RU"], ["W"], ["W"], ["RD"]], 
    [["W"], ["RD"], ["RR"], ["RR"], ["RR"], ["RR"], ["W"], ["P"]]]

#cells key:
#0 - space
#1 - road
#2 - wall
#3 - start
#4 - exit
#5 - direction

i_max = len(grid)
j_max = len(grid[0])
for j in range(j_max):
    for i in range(i_max):
        currentSquare = grid[i][j]
        if "RR" in currentSquare or "RL" in currentSquare or "RU" in currentSquare or "RD" in currentSquare:
            grid[i][j] = [1]
        if "E" in currentSquare or "S" in currentSquare:
            grid[i][j] = [3]
        if "P" in currentSquare or "PD" in currentSquare: #Spaces
            grid[i][j] = [0]
        if "W" in currentSquare: #Walls
            grid[i][j] = [2]
            
for n in range(len(path)):
    grid[path[n][0]][path[n][1]] = [5]
    
A = np.matrix(np.array(grid))
    
matshow(A, interpolation='nearest')
annotate('Entrance', xy = (1, 0), xytext= (1, 50), xycoords='data',
         textcoords='offset points', arrowprops=dict(arrowstyle="->"))
axis('off')
show()
close()
