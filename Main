def main():
    
#    grid = [[["RL"], ["S"], ["W"], ["E"], ["W"], ["RU"], ["RR"], ["RR"]],
#        [["RD"], ["W"], ["RL"], ["RU"], ["W"], ["RU"], ["W"], ["RD"]], 
#        [["RD"], ["W"], ["W"], ["RU"], ["W"], ["RU"], ["W"], ["RD"]], 
#       [["RD"], ["W"], ["P"], ["RL"], ["RU"], ["RR"], ["W"], ["RD"]], 
#        [["RD"], ["RR"], ["W"], ["W"], ["RU"], ["W"], ["W"], ["RD"]], 
#        [["W"], ["RD"], ["RR"], ["RR"], ["RR"], ["RR"], ["W"], ["P"]]]
    
    grid = [[["RU"], ["RR"], ["RR"], ["RR"], ["W"]],
 [["RU"], ["W"], ["RD"], ["W"], ["P"]],
 [["RU"], ["RR"], ["RR", "RD"], ["E"], ["RU"]],
 [["RU"], ["W"], ["RD"], ["W"], ["RU"]],
 [["S"], ["W"], ["RD"], ["RR"], ["RR"]]]

    class cell():
        def __init__(self, i, j):
            self.i = i
            self.j = j
            self.parent = None
            self.g = 0
            self.h = 0
            self.f = 0
            self.up = False
            self.left = False
            self.right = False
            self.down = False

    def classify_cells():
        startLocation = []
        parkingSpaces = []
        shopEntrance = []
        for j in range(j_max):
            for i in range(i_max):
                currentSquare = grid[i][j]
                currentCell = cell(i,j)
                if "E" in currentSquare:
                    shopEntrance = [i,j]
                if "S" in currentSquare:
                    startLocation = [i,j]
                if "RU" in currentSquare:
                    currentCell.up = True
                if "RL" in currentSquare:
                    currentCell.left = True
                if "RR" in currentSquare:
                    currentCell.right = True
                if "RD" in currentSquare:
                    currentCell.down = True
                if "P" in currentSquare:
                    parkingSpaces.append([i,j])
                grid[i][j].append(currentCell)
        return  shopEntrance, parkingSpaces, startLocation
                
    def taxicabDistance(cell):
        dist = abs(cell[0] - shopEntrance[0]) + abs(cell[1] - shopEntrance[1])
        return dist

    def compareTaxicabDistance(cell1, cell2):
        return taxicabDistance(cell1) - taxicabDistance(cell2)

    def getCell(i, j):
        return grid[i][j][-1]

    def h(cell):
        return abs(cell.i - end.i) + abs(cell.j - end.j)

    def getAdjacent(cell):
        adjCells = []
        if cell.i > 0:
            if getCell(cell.i-1, cell.j).up or getCell(cell.i-1, cell.j) is end:
                adjCells.append(getCell(cell.i-1, cell.j))

        if cell.j > 0:
            if getCell(cell.i, cell.j-1).left or getCell(cell.i, cell.j-1) is end:
                adjCells.append(getCell(cell.i, cell.j-1))

        if cell.i < i_max - 1:
            if getCell(cell.i+1, cell.j).down or getCell(cell.i+1, cell.j) is end:
                adjCells.append(getCell(cell.i+1, cell.j))

        if cell.j < j_max - 1:
            if getCell(cell.i, cell.j+1).right or getCell(cell.i, cell.j+1) is end:
                adjCells.append(getCell(cell.i, cell.j+1))

        return adjCells

    def display_path():
        path = []
        currentCell = end
        while currentCell.parent is not start:
            currentCell = currentCell.parent
            path.append([currentCell.i, currentCell.j])
        path.reverse()
        path.insert(0, [start.i, start.j])
        path.append([end.i, end.j])
        return path

    def updateCell(adj, cell):
        adj.g = cell.g + 1
        adj.h = h(adj)
        adj.parent = cell
        adj.f = adj.g + adj.h
        return

    i_max = len(grid)
    j_max = len(grid[0])
    opened = []
    closed = set()
    cells = []
    solved = False
    
    cellTypes = classify_cells()
    shopEntrance = cellTypes[0]
    parkingSpaces = cellTypes[1]
    startLocation = cellTypes[2]
    #Information
    
    print("Shop entrance: " + str(shopEntrance) + "\nParking spaces: " + str(parkingSpaces) + "\nStart location: " + str(startLocation))
          
    print("Ordered parking spaces: " + str(parkingSpaces))
    
    if len(startLocation) != 0:
        start = getCell(startLocation[0], startLocation[1])
    else:
        print("Starting location not found")
        return
    
    if len(parkingSpaces) != 0:
        end = getCell(parkingSpaces[0][0], parkingSpaces[0][1])
    else:
        print("Parking spaces not found")
        return

    if len(shopEntrance) != 0:
        test = getCell(shopEntrance[0], shopEntrance[1]) #**************************
    else:
        print("Shop entrance not found")
        return
        
    for i in parkingSpaces:
        i.append(taxicabDistance(i))
        
    parkingSpaces = sorted(parkingSpaces, key=lambda space: space[2])
    
    for i in parkingSpaces:
        i.remove(i[-1])
    
    opened.append((start.f, start))
    opened = sorted(opened, key=lambda x: x[1])
    while len(opened):
        f, cell = opened.pop(0)
        closed.add(cell)
        if cell is end:
            print("Path: " + str(display_path()))
            solved = True
            break
        adj_cells = getAdjacent(cell)
        for adj_cell in adj_cells:
            if adj_cell not in closed:
                if (adj_cell.f, adj_cell) in opened:
                    if adj_cell.g > cell.g + 1:
                        updateCell(adj_cell, cell)
                else:
                    updateCell(adj_cell, cell)
                    opened.append((adj_cell.f, adj_cell))
                    opened = sorted(opened, key=lambda x: x[0])
    if not solved:
        print("Unable to find a path")
    return

main()
